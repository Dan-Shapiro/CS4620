
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 29 12:29:59 EDT 2017
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 29 12:29:59 EDT 2017
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\010\000\002\002\004\000\002\002\006\000\002\007" +
    "\002\000\002\010\002\000\002\005\025\000\002\006\021" +
    "\000\002\004\004\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\004\017\005\001\002\000\004\002\055\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\012\001\002\000" +
    "\004\002\000\001\002\000\004\011\uffff\001\002\000\004" +
    "\011\014\001\002\000\004\032\015\001\002\000\004\034" +
    "\016\001\002\000\004\036\017\001\002\000\004\016\020" +
    "\001\002\000\004\007\021\001\002\000\004\035\022\001" +
    "\002\000\004\041\023\001\002\000\004\042\024\001\002" +
    "\000\004\061\025\001\002\000\004\010\026\001\002\000" +
    "\004\011\027\001\002\000\004\052\ufffe\001\002\000\004" +
    "\052\033\001\002\000\006\012\052\052\033\001\002\000" +
    "\006\012\ufffa\052\ufffa\001\002\000\004\007\034\001\002" +
    "\000\004\007\035\001\002\000\004\015\036\001\002\000" +
    "\004\010\037\001\002\000\004\060\040\001\002\000\004" +
    "\027\041\001\002\000\004\007\042\001\002\000\004\015" +
    "\043\001\002\000\004\010\044\001\002\000\004\060\045" +
    "\001\002\000\004\027\046\001\002\000\004\064\047\001" +
    "\002\000\004\010\050\001\002\000\004\044\051\001\002" +
    "\000\006\012\ufffc\052\ufffc\001\002\000\004\012\054\001" +
    "\002\000\006\012\ufffb\052\ufffb\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\027\001\001\000\006\004\030\006\031\001\001\000\004" +
    "\006\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public PrintWriter out; 

	public String programName;
	public void unrecovered_syntax_error(Symbol cur_SymbolValue) { report_fatal_error("Fatal syntax error", cur_SymbolValue);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		done_parsing();
		Symbol SymbolValue = (Symbol)info;
		mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value; throw new mjparser.ParseException("Fatal parsing error", 
				tok.line, tok.pos);
	}

	public void report_error(String message, Object info) {
		Symbol SymbolValue = (Symbol)info;
		mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
		System.err.println("[" + tok.line + "," + tok.pos + "] " 
				+ message + " at " + tok.toString() );
	}
	
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement_list ::= statement 
            {
              Object RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",2, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= MEGGYSETPIXEL LPAREN LPAREN BYTE RPAREN INT_LITERAL COMMA LPAREN BYTE RPAREN INT_LITERAL COMMA COLOR_LITERAL RPAREN SEMI 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue num1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue num2 = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue color = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
	parser.out.println("# Load constant int num1 \n ldi    r24,lo8(" + num1.lexeme + ") \n ldi    r25,hi8(" + num1.lexeme + ") \n # push two byte expression onto stack \n push   r25 \n push   r24 \n # Casting num1 to byte \n pop    r24 \n pop    r25 \n push   r24 \n # Load constant int num2 \n ldi    r24,lo8(" + num2.lexeme + ") \n ldi    r25,hi8(" + num2.lexeme + ") \n # push two byte expression onto stack \n push   r25 \n push   r24 \n # Cast num2 to byte \n pop    r24 \n pop    r25 \n push   r24 \n # Color expression Meggy.Color.X \n ldi    r22," + color.value  + " \n # push one byte expression onto stack \n push   r22 \n ### Meggy.setPixel(num1,num2,color) call \n # load a one byte expression off stack \n pop    r20 \n # load a one byte expression off stack \n pop    r22 \n # load a one byte expression off stack \n pop    r24 \n call   _Z6DrawPxhhh \n call   _Z12DisplaySlatev \n "); 		

              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_class ::= CLASS ID NT$0 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE NT$1 statement_list RBRACE RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-17)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
	System.out.println("Generate epilogue using avrF.rtl.s");
	InputStream mainEpilogue=null;
	BufferedReader reader=null;
	try {
		mainEpilogue
			= this.getClass().getClassLoader().getResourceAsStream(
					"avrF.rtl.s");
		reader = new BufferedReader(new 
				InputStreamReader(mainEpilogue));

		String line = null;
		while ((line = reader.readLine()) != null) {
			parser.out.println(line);
		}
	} catch ( Exception e2) {
		e2.printStackTrace();
	}
	finally{
		try{
			if(mainEpilogue!=null) mainEpilogue.close();
			if(reader!=null) reader.close();
		}
		catch (IOException e) {
			e.printStackTrace();
		}
	}
	parser.out.flush();
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-18)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-13)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
 
	System.out.println("Generate prolog using avrH.rtl.s");
	InputStream mainPrologue=null;
	BufferedReader reader=null;
	try {
		// The syntax for loading a text resource file 
		// from a jar file here: // http://www.rgagnon.com/javadetails/java-0077.html
		mainPrologue 
			= this.getClass().getClassLoader().getResourceAsStream(
					"avrH.rtl.s");
		reader = new BufferedReader(new 
				InputStreamReader(mainPrologue));

		String line = null;
		while ((line = reader.readLine()) != null) {
			parser.out.println(line);
		}
	} catch ( Exception e2) {
		e2.printStackTrace();
	}
	finally{
		try{
			if(mainPrologue!=null) mainPrologue.close();
			if(reader!=null) reader.close();
		}
		catch (IOException e) {
			e.printStackTrace();
		}
	}
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$1",6, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
 java.io.PrintStream sout 
	= new java.io.PrintStream(
			new java.io.FileOutputStream(name.lexeme+".java.s"));
	parser.out = new PrintWriter(sout);
	// Check filename is class name, if not exit with error message
	//System.exit(0);   
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",5, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class 
            {
              Object RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

