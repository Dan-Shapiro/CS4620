package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.List;
import ast.*;
import ast.visitor.*;

parser code {:

	public PrintWriter out; 

	public String programName;
	public void unrecovered_syntax_error(Symbol cur_SymbolValue) { report_fatal_error("Fatal syntax error", cur_SymbolValue);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		done_parsing();
		Symbol SymbolValue = (Symbol)info;
		mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value; throw new mjparser.ParseException("Fatal parsing error", 
				tok.line, tok.pos);
	}

	public void report_error(String message, Object info) {
		Symbol SymbolValue = (Symbol)info;
		mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
		System.err.println("[" + tok.line + "," + tok.pos + "] " 
				+ message + " at " + tok.toString() );
	}
	:}

	/* Notice: all terminals declared here */
	terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
	terminal SymbolValue LBRACE, RBRACE;
	terminal SymbolValue BOOLEAN, INT;
	terminal SymbolValue BYTE;
	terminal SymbolValue MAIN, IMPORT;
	terminal SymbolValue IF, ELSE;
	terminal SymbolValue LT;
	terminal SymbolValue EQUAL;
	terminal SymbolValue AND, NOT;
	terminal SymbolValue WHILE;
	terminal SymbolValue COMMA, DOT;
	terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
	terminal SymbolValue STRING, VOID;
	terminal SymbolValue CLASS, EXTENDS;
	terminal SymbolValue LBRACKET, RBRACKET;
	terminal SymbolValue LENGTH;
	terminal SymbolValue SEMI;
	terminal SymbolValue ASSIGN;

	terminal SymbolValue MEGGY;
	terminal SymbolValue MEGGYCOLOR;
	terminal SymbolValue MEGGYBUTTON;
	terminal SymbolValue MEGGYTONE;
	terminal SymbolValue MEGGYSETPIXEL;
	terminal SymbolValue MEGGYSETAUXLEDS;
	terminal SymbolValue MEGGYTONESTART;
	terminal SymbolValue MEGGYDELAY;
	terminal SymbolValue MEGGYGETPIXEL;
	terminal SymbolValue MEGGYCHECKBUTTON;

	terminal SymbolValue INT_LITERAL, ID;
	terminal SymbolValue TRUE, FALSE;
	terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
	terminal SymbolValue THIS;

	/* bogus terminal for unary precedence declaration */
	terminal UMINUS;

	non terminal program;
	non terminal Integer exp;
	non terminal statement_list;
	non terminal main_class;
	non terminal statement;
	non terminal exp;

	/* Declare precedence and associativity  here */
	precedence left TIMES;
	precedence right UMINUS;


	/* Meggy Java Grammar */
	start with program;

	program ::= 
	IMPORT MEGGY SEMI main_class
	;

	main_class ::=
	CLASS ID:name         
{: java.io.PrintStream sout 
	= new java.io.PrintStream(
			new java.io.FileOutputStream(name.lexeme+".java.s"));
	parser.out = new PrintWriter(sout);
	// Check filename is class name, if not exit with error message
	//System.exit(0);   
	:}
	LBRACE PUBLIC STATIC VOID MAIN 
	LPAREN STRING LBRACKET RBRACKET ID:param RPAREN
	LBRACE 
{: 
	System.out.println("Generate prolog using avrH.rtl.s");
	InputStream mainPrologue=null;
	BufferedReader reader=null;
	try {
		// The syntax for loading a text resource file 
		// from a jar file here: // http://www.rgagnon.com/javadetails/java-0077.html
		mainPrologue 
			= this.getClass().getClassLoader().getResourceAsStream(
					"avrH.rtl.s");
		reader = new BufferedReader(new 
				InputStreamReader(mainPrologue));

		String line = null;
		while ((line = reader.readLine()) != null) {
			parser.out.println(line);
		}
	} catch ( Exception e2) {
		e2.printStackTrace();
	}
	finally{
		try{
			if(mainPrologue!=null) mainPrologue.close();
			if(reader!=null) reader.close();
		}
		catch (IOException e) {
			e.printStackTrace();
		}
	}
	:}

statement_list:list 
RBRACE  
RBRACE 
{:
	System.out.println("Generate epilogue using avrF.rtl.s");
	InputStream mainEpilogue=null;
	BufferedReader reader=null;
	try {
		mainEpilogue
			= this.getClass().getClassLoader().getResourceAsStream(
					"avrF.rtl.s");
		reader = new BufferedReader(new 
				InputStreamReader(mainEpilogue));

		String line = null;
		while ((line = reader.readLine()) != null) {
			parser.out.println(line);
		}
	} catch ( Exception e2) {
		e2.printStackTrace();
	}
	finally{
		try{
			if(mainEpilogue!=null) mainEpilogue.close();
			if(reader!=null) reader.close();
		}
		catch (IOException e) {
			e.printStackTrace();
		}
	}
	parser.out.flush();
	:};

statement ::= MEGGYSETPIXEL LPAREN 

LPAREN BYTE RPAREN INT_LITERAL:num1 COMMA
LPAREN BYTE RPAREN INT_LITERAL:num2 COMMA
COLOR_LITERAL:color
RPAREN SEMI
{:
	parser.out.println("# Load constant int num1 \n ldi    r24,lo8(" + num1.lexeme + ") \n ldi    r25,hi8(" + num1.lexeme + ") \n # push two byte expression onto stack \n push   r25 \n push   r24 \n # Casting num1 to byte \n pop    r24 \n pop    r25 \n push   r24 \n # Load constant int num2 \n ldi    r24,lo8(" + num2.lexeme + ") \n ldi    r25,hi8(" + num2.lexeme + ") \n # push two byte expression onto stack \n push   r25 \n push   r24 \n # Cast num2 to byte \n pop    r24 \n pop    r25 \n push   r24 \n # Color expression Meggy.Color.X \n ldi    r22," + color.value  + " \n # push one byte expression onto stack \n push   r22 \n ### Meggy.setPixel(num1,num2,color) call \n # load a one byte expression off stack \n pop    r20 \n # load a one byte expression off stack \n pop    r22 \n # load a one byte expression off stack \n pop    r24 \n call   _Z6DrawPxhhh \n call   _Z12DisplaySlatev \n "); 		
	:}; 

statement_list ::= 
statement_list statement
|
statement;

exp ::=
	exp:a AND:op exp:b 
{: 
	RESULT = new AndExp(op.line, op.pos, a, b); 
:}
	| exp:a EQUAL:op exp:b 
{: 
	RESULT = new EqualExp(op.line, op.pos, a, b); 
	:}
	| exp:a PLUS:op exp:b 
{: 
	RESULT = new PlusExp(op.line, op.pos, a, b); 
	:}
	| exp:a MINUS:op exp:b 
{: 
	RESULT = new MinusExp(op.line, op.pos, a, b); 
	:}
	| exp:a TIMES:op exp:b 
{: 
	RESULT = new MulExp(op.line, op.pos, a, b); 
	:}
	| MINUS:op exp:a 
{: 
	RESULT = new NegExp(op.line, op.pos, a); 
	:}  %prec UMINUS
	| call_exp:e
{:
	RESULT = e;
	:}
	| MEGGYGETPIXEL:mgp LPAREN exp:a COMMA exp:b RPAREN 
{: 
	RESULT = new MeggyGetPixel(mgp.line, mgp.pos, a, b);
	:}
	| MEGGYCHECKBUTTON:mcb LPAREN exp:e RPAREN 
{: 
	RESULT = new MeggyCheckButton(mcb.line, mcb.pos, e);
	:}
	| LPAREN:lp BYTE RPAREN exp:e 
{:
	RESULT = new ByteCast(lp.line, lp.pos, e); 
	:}
	| INT_LITERAL:n    
{: 
	RESULT = new IntLiteral(n.line, n.pos, n.lexeme, n.value); 
	:}
	| COLOR_LITERAL:n  
{: 
	RESULT = new ColorLiteral(n.line, n.pos, n.lexeme, n.value); 
	:}
	| BUTTON_LITERAL:n 
{: 
	RESULT = new ButtonLiteral(n.line, n.pos, n.lexeme, n.value); 
	:}
	| TRUE:lit  
{: 
	RESULT = new TrueLiteral(lit.line, lit.pos, lit.lexeme, lit.value);
	:}
	| FALSE:lit 
{: 
	RESULT = new FalseLiteral(lit.line, lit.pos, lit.lexeme, lit.value);
	:}
	| identifier:name
{:
	RESULT = name;
	:}
	| NOT:op exp:e 
{: 
	RESULT = new NotExp(op.line, op.pos, e);
	:}
	| LPAREN exp:e RPAREN 
{: 
	RESULT = e;
	:}
	;

