
package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;
import ast.visitor.*;
import ast_visitors.*;

parser code {:

	public PrintWriter out; 

	public String programName;

	public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
		report_fatal_error("Fatal syntax error", cur_SymbolValue);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		done_parsing();
		Symbol SymbolValue = (Symbol)info;
		mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
		throw new mjparser.ParseException("Fatal parsing error", 
				tok.line, tok.pos);
	}

	public void report_error(String message, Object info) {
		Symbol SymbolValue = (Symbol)info;
		mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
		System.err.println("[" + tok.line + "," + tok.pos + "] " 
				+ message + " at " + tok.toString() );
	}

	:}

	/* Notice: all terminals declared here */
	terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
	terminal SymbolValue LBRACE, RBRACE;
	terminal SymbolValue BOOLEAN, INT;
	terminal SymbolValue BYTE;
	terminal SymbolValue MAIN, IMPORT;
	terminal SymbolValue IF, ELSE;
	terminal SymbolValue LT;
	terminal SymbolValue EQUAL;
	terminal SymbolValue AND, NOT;
	terminal SymbolValue WHILE;
	terminal SymbolValue COMMA, DOT;
	terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
	terminal SymbolValue STRING, VOID;
	terminal SymbolValue CLASS, EXTENDS;
	terminal SymbolValue LBRACKET, RBRACKET;
	terminal SymbolValue LENGTH;
	terminal SymbolValue SEMI;
	terminal SymbolValue ASSIGN;

	terminal SymbolValue MEGGY;
	terminal SymbolValue MEGGYCOLOR;
	terminal SymbolValue MEGGYBUTTON;
	terminal SymbolValue MEGGYTONE;
	terminal SymbolValue MEGGYSETPIXEL;
	terminal SymbolValue MEGGYSETAUXLEDS;
	terminal SymbolValue MEGGYTONESTART;
	terminal SymbolValue MEGGYDELAY;
	terminal SymbolValue MEGGYGETPIXEL;
	terminal SymbolValue MEGGYCHECKBUTTON;

	terminal SymbolValue INT_LITERAL;
	terminal SymbolValue ID;
	terminal SymbolValue TRUE, FALSE;
	terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
	terminal SymbolValue THIS;

	/* bogus terminal for unary precedence declaration */
	terminal UMINUS;

	non terminal Program program;
	non terminal Integer exp;
	non terminal LinkedList<IExp> exp_list;
	non terminal IStatement statement;
	non terminal List<IStatement> statement_list;
	non terminal MainClass main_class;
	non terminal IClassDecl class;
	non terminal IExp expression;
	non terminal List<IClassDecl> class_dec;
	non terminal LinkedList<MethodDecl> method_list;
	non terminal LinkedList<IClassDecl> class_list;
	non terminal MethodDecl method;
	non terminal type;
	non terminal Formal formal;
	non terminal LinkedList<Formal> formal_list;

	/* Declare precedence and associativity  here */
	/*precedence nonassoc LT, EQUAL;*/
	/*precedence nonassoc IF, ELSE;*/
	precedence left LT;
	precedence left DOT;
	precedence left AND;
	precedence left EQUAL;
	precedence left PLUS,MINUS; 
	precedence left	TIMES;
	precedence right UMINUS;
	precedence right LPAREN, RPAREN; //BYTE;
	precedence right ELSE;
	/*precedence left TIMES, AND;*/

	/* precedence right NOT, UMINUS;
	   precedence right LPAREN,RPAREN,ELSE; */


	/* Meggy Java Grammar */
	start with program;

	program ::= 
	IMPORT:op MEGGY:b SEMI main_class:a class_dec:c
{: RESULT = new Program(op.line, op.pos, a, c ); :}
;
class_dec ::= {: RESULT = new LinkedList<IClassDecl>(); :} ;
main_class ::=
CLASS:op ID:name         
LBRACE PUBLIC STATIC VOID MAIN 
LPAREN STRING LBRACKET RBRACKET ID:param RPAREN
LBRACE 
statement_list:list 
RBRACE
RBRACE 
{:
	if(!(parser.programName.equals(name.lexeme + ".java"))) { 
		System.out.println("Class name and file name do not match.");
		System.exit(1); }
	RESULT = new MainClass(op.line, op.pos, name.lexeme, param.lexeme, new BlockStatement(op.line, op.pos, list));

	:};
class ::= 
CLASS:c ID:name LBRACE method_list:mlist RBRACE
{: RESULT = new TopClassDecl(c.line, c.pos, name.lexeme, new LinkedList<VarDecl>(), mlist); :}
;

class_list ::= class_list:list class:clss {: if(clss!=null) {list.add(clss); } RESULT=list; :}
|  {: RESULT = new LinkedList<IClassDecl>(); :}
;

method ::=
PUBLIC:p type:t ID:id LPAREN formal_list:fmlist RPAREN
LBRACE statement_list:stlist RETURN expression:e SEMI
{: RESULT = new MethodDecl(p.line, p.pos, (IType)t, id.lexeme, fmlist, new LinkedList<VarDecl>(), stlist, e); :}
|  PUBLIC:p type:t ID:id LPAREN formal_list:fmlist RPAREN
LBRACE statement_list:stlist RBRACE
{: RESULT = new MethodDecl(p.line, p.pos, (IType)t, id.lexeme, fmlist, new LinkedList<VarDecl>(), stlist); :}
;

method_list ::= method_list:list method:mth {: if(mth!=null) { list.add(mth); } RESULT=list; :}
|  {: RESULT = new LinkedList<MethodDecl>(); :}
;

formal ::=
type:t ID:id {: RESULT = new Formal(id.line, id.pos, (IType)t, id.lexeme); :}
;

formal_list ::= formal_list:list COMMA formal:frmal {: if(frmal!=null) {list.add(frmal); } RESULT=list; :}
|  formal_list:list formal:frmal {: 
	if(frmal!=null) { list.add(frmal); }
	RESULT = list; :}
	|  {: RESULT = new LinkedList<Formal>(); :}
	;

type ::=
BOOLEAN:a {: RESULT = new BoolType(a.line, a.pos); :}
| BYTE:a {: RESULT = new ByteType(a.line, a.pos); :}
| INT:a {: RESULT = new IntType(a.line, a.pos); :}
| VOID:a {: RESULT = new VoidType(a.line, a.pos); :}
| MEGGYCOLOR:a {: RESULT = new ColorType(a.line, a.pos); :}
| MEGGYBUTTON:a {: RESULT =new ButtonType(a.line, a.pos); :}
| MEGGYTONE:a {: RESULT = new ToneType(a.line, a.pos); :}
;

statement ::= MEGGYSETPIXEL LPAREN:op expression:a COMMA expression:b COMMA expression:c RPAREN SEMI
{:      
	RESULT = new MeggySetPixel(op.line, op.pos, a, b, c); :}
	| MEGGYDELAY LPAREN:op expression:a RPAREN SEMI
{: RESULT = new MeggyDelay(op.line, op.pos, a); :}
| IF LPAREN:op expression:a RPAREN statement:s1
{: RESULT = new IfStatement(op.line, op.pos, a, s1, (IStatement)null); :} 
| IF LPAREN:op expression:a RPAREN statement:s1 ELSE statement:s2
{: RESULT = new IfStatement(op.line, op.pos, (IExp)a, (IStatement)s1, (IStatement)s2); :}
| WHILE LPAREN:op expression:a RPAREN statement:s1
{: RESULT = new WhileStatement(op.line, op.pos, (IExp)a, (IStatement)s1); :}
| expression:e1 DOT:dt ID:id LPAREN exp_list:list RPAREN SEMI
{: RESULT = new CallStatement(dt.line, dt.pos, e1, id.lexeme, list); :}
| LBRACE:op statement_list:list RBRACE 
{:     
	RESULT = new BlockStatement(op.line, op.pos, list); :}


	;

statement_list ::=  statement_list:list statement:s
/* statement_list can be null */
{: if(s!=null) { list.add(s); } RESULT = list; 
	:}
	| 
{:     
	RESULT = new LinkedList<IStatement>(); 
	:}		
	;
expression ::= expression:a AND:op expression:b
{: RESULT = new AndExp(op.line, op.pos, (IExp)a, (IExp)b); :}
| expression:a EQUAL:op expression:b
{: RESULT = new EqualExp(op.line, op.pos, (IExp)a, (IExp)b); :}
| expression:a PLUS:op expression:b
{: RESULT = new PlusExp(op.line, op.pos, (IExp)a, (IExp)b); :}
| expression:a MINUS:op expression:b
{: RESULT = new MinusExp(op.line, op.pos, a, b); :}
| expression:a TIMES:op expression:b
{: RESULT = new MulExp(op.line, op.pos, (IExp)a, (IExp)b); :}
| MINUS:op expression:a
{:	
	RESULT = new NegExp(1, 1, a); 
	:}
	| MEGGYGETPIXEL:op LPAREN expression:a COMMA expression:b RPAREN 
{: RESULT = new MeggyGetPixel(op.line, op.pos, (IExp)a, (IExp)b); :}
| MEGGYCHECKBUTTON:op LPAREN expression:a RPAREN
{: RESULT = new MeggyCheckButton(op.line, op.pos, (IExp)a); :}
| LPAREN:op BYTE RPAREN expression:a
{: RESULT = new ByteCast(op.line, op.pos, a); :}
| INT_LITERAL:a
{: RESULT = new IntLiteral(a.line, a.pos, a.lexeme, a.value); :}
| COLOR_LITERAL:a
{: RESULT = new ColorLiteral(a.line, a.pos, a.lexeme, a.value); :}
| BUTTON_LITERAL:a
{: RESULT = new ButtonLiteral(a.line, a.pos, a.lexeme, a.value); :}
| TRUE:a
{: RESULT = new TrueLiteral(a.line, a.pos, a.lexeme, a.value); :}
| FALSE:a
{: RESULT = new FalseLiteral(a.line, a.pos, a.lexeme, a.value); :}
| NOT:op expression:a
{: RESULT = new NotExp(1, 1, (IExp)a); :}
| LPAREN:op expression:a RPAREN 
{: RESULT = a; :} 
| ID:id {: RESULT = new IdLiteral(id.line, id.pos, id.lexeme); :}
| THIS:t {: RESULT = new ThisLiteral(t.line, t.pos, t.lexeme, t.value); :}
| NEW:op ID:id LPAREN RPAREN {: RESULT = new NewExp(op.line, op.pos, id.lexeme); :}
| expression:e1 DOT:dt ID:id LPAREN exp_list:list RPAREN {: RESULT = new CallExp(dt.line, dt.pos, e1, id.lexeme,			list); :}				
; 

exp_list ::= exp_list:list COMMA expression:exp   {: if(exp!=null) {list.add(exp); } RESULT=list; :}
| exp_list:list expression:exp {: 
	if(exp!=null) list.add(exp);
	RESULT = list; :}
	|  {: RESULT = new LinkedList<IExp>(); :}
	;